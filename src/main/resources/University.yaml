swagger: "2.0"
info:
  description: "This is a sample server university server"
  version: "1.0.0"
  title: "Swagger University"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "university@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "university.swagger.io"
basePath: "/v2"
tags:
  - name: "faculty"
    description: "Everything about your faculty"
    externalDocs:
      description: "Find out more"
      url: "http://swagger.io"
  - name: "group"
    description: "Operations about group"
  - name: "lector"
    description: "Operations about lector"
  - name: "lesson"
    description: "Operations about lesson"
  - name: "timeSlot"
    description: "timetable"
    externalDocs:
      description: "Find out more about our university"
      url: "http://swagger.io"
schemes:
  - "https"
  - "http"
paths:
  /restFaculties:
    get:
      summary: Returns a list of faculties.
      description: Optional extended description in Markdown.
      produces:
        - application/json
      responses:
        200:
          description: OK

    post:
      summary: Creates a new faculty.
      parameters:
        - in: body
          name: faculty
          schema:
            $ref: "#/definitions/Faculty"
      responses:
        200:
          description: OK
        400:
          description: Bad faculty
        404:
          description: Bad request
        default:
          description: Unexpected error



  /restFaculties/{facultyId}:
    put:
      summary: Update faculty.
      parameters:
        - name: "facultyId"
          in: "path"
          description: "ID of faculty to update"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Faculty"
        400:
          description: Bad faculty
        404:
          description: Bad request
        default:
          description: Unexpected error
    get:
      summary: Returns a faculty by ID.
      parameters:
        - in: path
          name: facultyId
          required: true
          type: integer
          minimum: 1
          description: Parameter description in Markdown.
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/Faculty"
        400:
          description: The specified faculty ID is invalid (e.g. not a number).
        404:
          description: A user with the specified ID was not found.
        default:
          description: Unexpected error


    delete:
      summary: Delete faculty.
      parameters:
        - name: "facultyId"
          in: "path"
          description: "ID of faculty to update"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: OK
        400:
          description: he specified faculty ID is invalid (e.g. not a number).
        404:
          description: A user with the specified ID was not found
        default:
          description: Unexpected error

  /restGroups:
    get:
      summary: Returns a list of groups.
      description: Optional extended description in Markdown.
      produces:
        - application/json
      responses:
        200:
          description: OK
        400:
          description: Not exist any groups
        404:
          description: Bad request
        default:
          description: Unexpected error

    post:
      summary: Creates a new group.
      operationId: addGroup
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "group"
          description: "Group object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Group"
      responses:
        200:
          description: OK
        400:
          description: Bad group
        404:
          description: Bad request
        default:
          description: Unexpected error

  /restGroups:/{groupId}:
    put:
      summary: Update group.
      operationId: "updateGroup"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: groupId
          in: "path"
          description: "The id that needs to be deleted"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "group"
          description: "Updated group object"
          required: true
          schema:
            $ref: "#/definitions/Group"
      responses:
        200:
          description: OK
        400:
          description: Invalid ID supplied
        404:
          description: Group not found
        405:
          description: Validation exception
        default:
          description: Unexpected error
    get:
      summary: Returns a group by ID.
      operationId: "getGroupById"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: groupId
          in: "path"
          description: "The id that needs to be fetched"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Group"
        400:
          description: The specified group ID is invalid (e.g. not a number).
        404:
          description: A group with the specified ID was not found.
        default:
          description: Unexpected error


    delete:
      summary: Delete group.
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: groupId
          in: "path"
          description: "The id that needs to be deleted"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: OK
        400:
          description: The specified group ID is invalid (e.g. not a number).
        404:
          description: A group with the specified ID was not found
        default:
          description: Unexpected error
  /restLectors:
    get:
      summary: Returns a list of lectors.
      description: Optional extended description in Markdown.
      produces:
        - application/json
      responses:
        200:
          description: OK
        400:
          description: Bad Request
        404:
          description: Lectors weren't founded
        default:
          description: Unexpected error

    post:
      summary: Creates a new lector.
      operationId: "addLector"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "lector"
          description: "Lector object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Lector"
      responses:
        200:
          description: OK
        400:
          description: Invalid Lector supplied
        404:
          description: Bad request
        default:
          description: Unexpected error

  /restLectors:/{lectorId}:
    put:
      summary: Update lector.
      operationId: "updateLector"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: lectorId
          in: "path"
          description: "The id that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "lector"
          description: "Updated lector object"
          required: true
          schema:
            $ref: "#/definitions/Lector"
      responses:
        200:
          description: OK
        400:
          description: Invalid ID supplied
        404:
          description: Lector not found
        405:
          description: Validation exception
        default:
          description: Unexpected error
    get:
      summary: Returns a lector by ID.
      operationId: "getLectorById"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: lectorId
          in: "path"
          description: "The id that needs to be fetched"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Lector"
        400:
          description: The specified lector ID is invalid (e.g. not a number).
        404:
          description: A lector with the specified ID was not found.
        default:
          description: Unexpected error



    delete:
      summary: Delete lector.
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: lectorId
          in: "path"
          description: "The id that needs to be deleted"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: OK
        400:
          description: The specified lector ID is invalid (e.g. not a number).
        404:
          description: A lector with the specified ID was not found
        default:
          description: Unexpected error
  /restLessons:
    get:
      summary: Returns a list of lessons.
      description: Optional extended description in Markdown.
      produces:
        - application/json
      responses:
        200:
          description: OK
        400:
          description: Not exist any lessons
        404:
          description: Bad request
        default:
          description: Unexpected error

    post:
      summary: Creates a new lesson.
      operationId: addLesson
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "lesson"
          description: "Lesson object that needs to be added"
          required: true
          schema:
            $ref: "#/definitions/Lesson"
      responses:
        200:
          description: OK
        400:
          description: Bad lesson
        404:
          description: Bad request
        default:
          description: Unexpected error

  /restLessons:/{lessonId}:
    put:
      summary: Update lesson.
      operationId: "updateLesson"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: lessonId
          in: "path"
          description: "The id that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "lesson"
          description: "Updated lesson object"
          required: true
          schema:
            $ref: "#/definitions/Lesson"
      responses:
        200:
          description: OK
        400:
          description: Invalid ID supplied
        404:
          description: Lesson not found
        405:
          description: Validation exception
        default:
          description: Unexpected error
    get:
      summary: Fetch lesson.
      operationId: "getLessonById"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: lessonId
          in: "path"
          description: "The id that needs to be fetched"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Lesson"
        400:
          description: The specified lesson ID is invalid (e.g. not a number).
        404:
          description: A lesson with the specified ID was not found.
        default:
          description: Unexpected error


    delete:
      summary: Delete lesson.
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: lessonId
          in: "path"
          description: "The id that needs to be deleted"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: OK
        400:
          description: The specified lesson ID is invalid (e.g. not a number).
        404:
          description: A lesson with the specified ID was not found
        default:
          description: Unexpected error

  /restTimeSlots:
    get:
      summary: Returns a list of timeSlot.
      description: Optional extended description in Markdown.
      produces:
        - application/json
      responses:
        200:
          description: OK
        400:
          description: Not exist any timeSlots
        404:
          description: Bad request
        default:
          description: Unexpected error

    post:
      summary: Creates a new timeSlot.
      operationId: addTimeSlot
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "timeSlot"
          description: "timeSlot object that needs to be added"
          required: true
          schema:
            $ref: "#/definitions/TimeSlot"
      responses:
        200:
          description: OK
        400:
          description: Bad timeSlot
        404:
          description: Bad request
        default:
          description: Unexpected error

  /restTimeSlots/{timeSlotId}:
    put:
      summary: Update timeSlot.
      operationId: "updateTimeSlot"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: timeSlotId
          in: "path"
          description: "The id that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "lesson"
          description: "Updated timeSlot object"
          required: true
          schema:
            $ref: "#/definitions/TimeSlot"
      responses:
        200:
          description: OK
        400:
          description: Invalid ID supplied
        404:
          description: timeSlot not found
        405:
          description: Validation exception
        default:
          description: Unexpected error

    get:
      summary: Returns a timeSlot by ID.
      operationId: "getTimeSlotIdById"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: timeSlotId
          in: "path"
          description: "The id that needs to be fetched"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/TimeSlot"
        400:
          description: The specified timeSlot ID is invalid (e.g. not a number).
        404:
          description: A timeSlot with the specified ID was not found.
        default:
          description: Unexpected error



    delete:
      summary: Delete timeSlot.
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: timeSlotId
          in: "path"
          description: "The id that needs to be deleted"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: OK
        400:
          description: The specified timeSlot ID is invalid (e.g. not a number).
        404:
          description: A timeSlot with the specified ID was not found
        default:
          description: Unexpected error


definitions:
  Faculty:
    type: object
    required:
      - name
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      groups:
        type: array
        items:
          $ref: "#/definitions/Group"
      lectors:
        type: array
        items:
          $ref: "#/definitions/Lector"
    xml:
      name: Faculty
  Group:
    type: object
    required:
      - name
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      faculty:
        $ref: "#/definitions/Faculty"
    xml:
      name: Group
  Lector:
    type: object
    required:
      - firstName
      - lastName
    properties:
      id:
        type: integer
        format: int64
      firstName:
        type: string
      lastName:
        type: string
      faculty:
        $ref: "#/definitions/Faculty"
    xml:
      name: Lector
  Lesson:
    type: object
    required:
      - name
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      lector:
        $ref: "#/definitions/Lector"
    xml:
      name: Lesson
  TimeSlot:
    type: object
    properties:
      id:
        type: integer
        format: int64
      startLesson:
        type: string
        format: date-time
      endLesson:
        type: string
        format: date-time
      lesson:
        $ref: "#/definitions/Lesson"
      group:
        $ref: "#/definitions/Group"
    xml:
      name: TimeSlot


